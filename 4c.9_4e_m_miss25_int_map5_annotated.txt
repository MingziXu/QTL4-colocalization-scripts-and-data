> library(qtl)
## import data and check imported data ##
> qtl4m.int.25<-read.cross(format="csv",file="/data/GBS_Xu/QTL_mapping/Mapping_int_map5/4c.9_4e_m_miss25_int_map5_qtl.csv")
 --Read the following data:
	 450  individuals
	 75  markers
	 5  phenotypes
 --Cross type: f2 
> 
## calculate genotype probability and simulate genotype for missing data ##
> qtl4m.int.gp<-calc.genoprob(qtl4m.int.25,step=0.2,error.prob=0.001)
> qtl4m.int.sim<-sim.geno(qtl4m.int.gp,step=0.2,n.draw=10000,map.function=c("kosambi"),err=0.001)

## model calculation below is computationally intensive- sometimes the program crashes; to avoid the imported data and simulations from being lost, save data, genotype probability and simulation before running models ##
> save.image("/data/GBS_Xu/QTL_mapping/Mapping_int_map5/4c.9_4e_m_miss25_int_map5.rda")

==========================================
## test if there is a family effect on phenotype distribution ##
## depends on theist results, the models below will either include or not include family as a covariate ##
> qtl4m.int.25$pheno$fam<-as.factor(qtl4m.int.25$pheno$fam)
> t.test(qtl4m.int.25$pheno$pheno~qtl4m.int.25$pheno$fam)

=========================================
## run one qtl model with family as a covariate ##
> qtl4m.int.imp.cov<-scanone(qtl4m.int.sim,method="imp",addcovar=qtl4m.int.25$pheno$fam)
> summary(qtl4m.int.imp.cov)

===========================================================
## run two qtl model ##
## results from this model is used as an indication of whether there are more than one qtl and where the second qtl may be ##
> qtl4m.int.two<-scantwo(qtl4m.int.gp)
> summary(qtl4m.int.two)

==========================================================
## run multiple qtl model ##
## convert family as a numeric data frame ##
> qtl4m.int.25$pheno$fam<-as.numeric(qtl4m.int.25$pheno$fam)
> fam<-pull.pheno(qtl4m.int.25,"fam")
> fam<-data.frame(fam)

## begin with location indicated by the one qtl model ##
> qtl4m.int.make1<-makeqtl(qtl4m.int.sim,chr=5,pos=26.3)

## fit model and refine qtl location ##
> qtl4m.int.fit.make1.cov<-fitqtl(qtl4m.int.sim,qtl=qtl4m.int.make1,covar=fam,formula=y~Q1+fam)
> summary(qtl4m.int.fit.make1.cov)
> qtl4m.int.refine1.cov<-refineqtl(qtl4m.int.sim,qtl=qtl4m.int.make1,covar=fam,method="imp",formula=y~Q1+fam,verbose=FALSE)
> summary(qtl4m.int.refine1.cov)

## if the refined location is different from the location indicated by the one qtl model, update the location and refit the model ##
> qtl4m.int.fit.refine1.cov<-fitqtl(qtl4m.int.sim,qtl=qtl4m.int.refine1.cov,covar=fam,formula=y~Q1+fam)
> summary(qtl4m.int.fit.refine1.cov)

## check if there is indication of any additional qtl ##
> qtl4m.int.add1<-addqtl(qtl4m.int.sim,qtl=qtl4m.int.refine1.cov,covar=fam,formula=y~Q1+Q2+fam)
> summary(qtl4m.int.add1)

## add a second qtl indicated by addqtl above, run model again now with 2 qtl with the same process above ##
> qtl4m.int.make2<-makeqtl(qtl4m.int.sim,chr=c(5,5),pos=c(5.6,26.4))
> qtl4m.int.fit.make2.cov<-fitqtl(qtl4m.int.sim,qtl=qtl4m.int.make2,covar=fam,formula=y~Q1+Q2+fam)
> summary(qtl4m.int.fit.make2.cov)
> qtl4m.int.refine2.cov<-refineqtl(qtl4m.int.sim,qtl=qtl4m.int.make2,covar=fam,method="imp",formula=y~Q1+Q2+fam,verbose=FALSE)
> summary(qtl4m.int.refine2.cov)
## check if there is any indication of interaction between the 2 qtl ##
> addint(qtl4m.int.sim,qtl=qtl4m.int.refine2.cov,covar=fam,method="imp",formula=y~Q1+Q2+fam,verbose=FALSE)
> qtl4m.int.fit.refine2.cov<-fitqtl(qtl4m.int.sim,qtl=qtl4m.int.refine2.cov,covar=fam,method="imp",formula=y~Q1+Q2+fam)
> summary(qtl4m.int.fit.refine2.cov)

## check if there is a third qtl ##
> qtl4m.int.add2<-addqtl(qtl4m.int.sim,qtl=qtl4m.int.refine2.cov,covar=fam,formula=y~Q1+Q2+Q3+fam)
> summary(qtl4m.int.add2)

## run 3 qtl model with the same process as above ##
> qtl4m.int.make3<-makeqtl(qtl4m.int.sim,chr=c(5,5,5),pos=c(5.6,26.4,59.8))
> qtl4m.int.fit.make3.cov<-fitqtl(qtl4m.int.sim,qtl=qtl4m.int.make3,covar=fam,formula=y~Q1+Q2+Q3+fam)
> summary(qtl4m.int.fit.make3.cov)
> qtl4m.int.refine3.cov<-refineqtl(qtl4m.int.sim,qtl=qtl4m.int.make3,covar=fam,method="imp",formula=y~Q1+Q2+Q3+fam,verbose=FALSE)
> summary(qtl4m.int.refine3.cov)
> addint(qtl4m.int.sim,qtl=qtl4m.int.refine3.cov,covar=fam,method="imp",formula=y~Q1+Q2+Q3+fam,verbose=FALSE)
> qtl4m.int.fit.refine3.cov<-fitqtl(qtl4m.int.sim,qtl=qtl4m.int.refine3.cov,covar=fam,method="imp",formula=y~Q1+Q2+Q3+fam)
> summary(qtl4m.int.fit.refine3.cov)

## end until addqtl does not indicate any more significant qtl ##
> qtl4m.int.add3<-addqtl(qtl4m.int.sim,qtl=qtl4m.int.refine3.cov,covar=fam,formula=y~Q1+Q2+Q3+Q4+fam)
> summary(qtl4m.int.add3)
> 
## check if the increase of lod score in the more complex model compared to the previous model exceeds the penalty ##
##
> qtl4m.int.fit.refine2.cov$lod-qtl4m.int.fit.refine1.cov$lod
> qtl4m.int.fit.refine3.cov$lod-qtl4m.int.fit.refine2.cov$lod


=====================================
## calculate 1.5-LOD confidence interval ##
> lodint(qtl4m.int.one.cov)
> lodint(qtl4m.int.refine3.cov,qtl.index=1)
> lodint(qtl4m.int.refine3.cov,qtl.index=2)
> lodint(qtl4m.int.refine3.cov,qtl.index=3)
> 
=============================================
## find the markers that are the closest to the peak locations ##
> find.marker(qtl4m.int.25,chr=5,pos=5.6)
> find.marker(qtl4m.int.25,chr=5,pos=26.4)
> find.marker(qtl4m.int.25,chr=5,pos=59.8)
> 
## calculate effect size at the marker with the highest LOD score ##
> qtl4m.int.eff.q1<-effectplot(qtl4m.int.sim,mname1="S006807_12726",draw=FALSE)
> qtl4m.int.eff.q1

> qtl4m.int.eff.q2<-effectplot(qtl4m.int.sim,mname1="S000353_224758",draw=FALSE)
> qtl4m.int.eff.q2

> qtl4m.int.eff.q3<-effectplot(qtl4m.int.sim,mname1="S001871_153614",draw=FALSE)
> qtl4m.int.eff.q3

## calculate effect size at the LOD peak position from the final MQM ##
> qtl4m.int.refine3.eff<-fitqtl(qtl4m.int.sim,qtl=qtl4m.int.refine3.cov,covar=fam,formula=y~Q1+Q2+Q3+fam,dropone=FALSE,get.est=TRUE)
> summary(qtl4m.int.refine3.eff)

===========================================
## calculate linkage group-wide significant threshold for the one qtl model ##
> qtl4m.int.perm.02<-scanone(qtl4m.int.gp,n.perm=50000,verbose=FALSE)
> summary(qtl4m.int.perm.02)

## calculate linkage group-wide significant threshold for the multiple qtl model ##
> qtl4m.perm2<-scantwo(qtl4m.int.sim,method="hk",n.perm=1000)
Doing permutation in batch mode ...
> summary(qtl4m.perm2)
## if the program crashes, break down into multiple batches of 250 and concatenate results together ##
> 
## calculate linkage group-wide significant threshold for the multiple qtl model ##
> qtl4m.pen<-calc.penalties(qtl4m.perm2)
> print(qtl4m.pen)